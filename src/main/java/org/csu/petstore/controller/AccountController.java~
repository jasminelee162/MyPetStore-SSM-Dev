package org.csu.petstore.controller;

import org.csu.petstore.entity.Account;
import org.csu.petstore.entity.Product;
import org.csu.petstore.service.AccountService;
import org.csu.petstore.service.CatalogService;
import org.csu.petstore.service.LogService;
import org.csu.petstore.vo.AccountVO;
import org.csu.petstore.vo.CategoryVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.support.SessionStatus;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

@Controller
@RequestMapping("/account")
@SessionAttributes({"loginAccount", "authenticated"})
public class AccountController {

    private String msg;
    private String captcha;

    @Autowired
    private AccountService accountService;

    @Autowired
    private LogService logService;

    @Autowired
    private CatalogService catalogService;


    @PostMapping("/signOn")
    public String signOn(@RequestParam("username") String username,
                         @RequestParam("password") String password,
                         @RequestParam("captcha") String gotCaptcha, // 接收前端验证码
                         @RequestParam(value = "admin", required = false) boolean admin,
                         Model model) {


        if (!validate(username, password, gotCaptcha, captcha)) {
            // 失败回跳
            model.addAttribute("msg", msg);
            return "account/signOnForm";
        } else {
            AccountVO loginAccount = accountService.getAccount(username, password);
            if (loginAccount == null) {
                this.msg = "用户名或密码错误";
                model.addAttribute("msg", msg);
                return "account/signOnForm";
            } else {
                model.addAttribute("loginAccount", loginAccount);
                model.addAttribute("authenticated", true);
                System.out.println(loginAccount.toString());

                /*if (loginAccount.getListOption()) {
                    List<Product> myList = catalogService.getProductListByCategory(loginAccount.getFavouriteCategoryId());
                    model.addAttribute("myList", myList);
                }*/
                //加载用户购物车信息
                /*CartService cartService = new CartService();
                Cart cart = cartService.getCartByUserId(username);
                if (cart != null) {
                    model.addAttribute("cart", cart);
                }*/
                String message = "User " + username + " login success!";
                logService.setLog(message);
                if(admin && loginAccount.isAdmin()) return "admin/main";


                List<CategoryVO> categories = catalogService.getAllCategories();
                model.addAttribute("categories", categories);

                return "catalog/main"; //返回主页

            }

        }


    }

    @PostMapping("/register")
    public String register(@ModelAttribute AccountVO account, Model model) {
        // 调用服务层的注册方法
        accountService.registerAccount(account);
        return "redirect:/catalog/index";
    }



    @GetMapping("/signOut")
    public String signOut(SessionStatus status, Model model) {
        status.setComplete(); // 标记 Session 完成，清除 @SessionAttributes 管理的属性
        model.addAttribute("myAttribute", null);
        return "catalog/main";

    }

    @GetMapping("/signOnForm")
    public String signOnForm(Model model) {
        return "account/signOnForm";
    }

    @GetMapping("/registerForm")
    public String registerForm(Model model) {
        return "account/registerForm";
    }

    @GetMapping("/Check")
    public ResponseEntity<Map<String, Boolean>> checkUsernameExists(@RequestParam(value = "username", required = false) String username) {
        // 检查用户名是否存在

        boolean exists = accountService.checkAccount(username);
        System.out.println(exists);
        Map<String, Boolean> response = new HashMap<>();
        response.put("exists", exists);
        return ResponseEntity.ok(response);
    }


    @GetMapping("/captcha")
    @ResponseBody
    public byte[] getCaptcha(Model model) throws IOException {
        int originalWidth = 200;
        int originalHeight = 50;

        double scale = 0.75;
        int width = (int) (originalWidth * scale);
        int height = (int) (originalHeight * scale);

        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = bufferedImage.createGraphics();

        g2d.setColor(Color.white);
        g2d.fillRect(0, 0, width, height);

        captcha = generateRandomString(5);

        g2d.setFont(new Font("SansSerif", Font.BOLD, (int) (24 * scale)));
        g2d.setColor(Color.black);

        g2d.drawString(captcha, (int) (50 * scale), (int) (30 * scale));

        addNoise(g2d, width, height);

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        ImageIO.write(bufferedImage, "png", os);
        return os.toByteArray();
    }


    private String generateRandomString(int length) {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder randomString = new StringBuilder();
        Random random = new Random();

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            randomString.append(characters.charAt(index));
        }
zx
        return randomString.toString();
    }

    private void addNoise(Graphics2D g2d, int width, int height) {
        Random random = new Random();
        for (int i = 0; i < 75; i++) {
            int x = random.nextInt(width);
            int y = random.nextInt(height);
            int size = random.nextInt((int)(5 * (0.75)));
            g2d.setColor(new Color(random.nextFloat(), random.nextFloat(), random.nextFloat()));
            g2d.fillRect(x, y, size, size);
        }
    }

    private boolean validate(String  username, String password, String gotCaptcha, String captcha) {

        if(username == null || username.isEmpty()){
            this.msg = "用户名不能空";
            return false;
        }
        if(password == null || password.isEmpty()){
            this.msg = "密码不能空";
            return false;
        }
        if(gotCaptcha == null || !(gotCaptcha.equalsIgnoreCase(captcha))){
            this.msg = "验证码错误";
            return false;
        }
        return true;
    }

}
